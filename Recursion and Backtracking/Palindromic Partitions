class Solution {
public:
    bool isPalindrome(const string &s,int start,int end) {
        while(start<end) {
            if(s[start++]!=s[end--])
                return false;
        }
        return true;
    }
    void findPaths(string &s,vector<vector<string>>&res,vector<string>&currPartition,int ind=0) {
        if(ind==s.size()) {
            res.push_back(currPartition);
            return;
        }
        
        for(int i=ind;i<s.size();i++) {
            if(isPalindrome(s,ind,i)) {
                currPartition.push_back(s.substr(ind,i-ind+1));
                findPaths(s,res,currPartition,i+1);
                currPartition.pop_back();
            }       
        }
    }

    vector<vector<string>> partition(string &s) {
        vector<vector<string>>res;
        vector<string>currPartition;
        findPaths(s,res,currPartition);
        return res;
    }
};

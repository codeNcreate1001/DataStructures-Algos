int printAndCountPatterns(vector<bool>&visited, vector<vector<int>>&via,int curr, int remaining, string &out) {
	if(remaining < 0 ) return 0;
	if(remaining == 0) {
		cout<<out<<"\n";
		return 1;
	}
	visited[curr] = 1;
	int result = 0;
	for(int i = 1;i<=9;i++) {
		if(not visited[i] and (via[curr][i]==0) or visited[via[curr][i]]) {
			char ch = '0' + i;
			out.push_back(ch);
			result+=printAndCountPatterns(visited,via,i,remaining-1,out);
			out.pop_back();
		}
	} visited[curr] = 0;
	return result;
}

int numberOfPatterns(int m, int n) {
	vector<vector<int>>via(10, vector<int>(10,0));
	via[1][3]=via[3][1]=2;
	via[1][7]=via[7][1]=4;
	via[3][9]=via[9][3]=6;
	via[7][9]=via[9][7]=8;
	via[1][9]=via[9][1]=via[2][8]=via[8][2]=via[3][7]=via[7][3]=via[4][6]=via[6][4]=5;
	int ways=0;
	vector<bool>visited(10,0);
	string pattern;
	for(int i=m;i<=n;i++) {
		for(int j=1;j<=9;j++) {
			char ch = '0' + j;
			pattern.push_back(ch);
			ways+=printAndCountPatterns(visited,via,j,i-1,pattern);
			pattern.pop_back();
		}
	}
	return ways;
}

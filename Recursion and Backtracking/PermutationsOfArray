void findPermute(vector<vector<int>>&ans,vector<int>&temp,vector<int>&nums,unordered_map<int,int>&visited){
    if(temp.size()==nums.size()) {
        ans.push_back(temp);
        return;
    }

    for(int i=0;i<nums.size();i++) { // pick every index from 0 to num.size()-1
        if(visited[nums[i]]==0) { // but pick only if it is unpicked before
            temp.push_back(nums[i]); // pick the element
            visited[(nums[i])] = 1; // to mark the presence of it being picked before, we store it in a map
            findPermute(ans,temp,nums,visited); // call for the next element of the permuatation
            visited[nums[i]] =0; // backtracking step where we unmark the presence of the number being visited
            temp.pop_back(); // we pop out the lastly inserted number
        }
    }
}


vector<vector<int>>permute(vector<int>&nums)
{
    vector<vector<int>>ans; // store the ans
    vector<int>temp; // store the permutation temporarily
    unordered_map<int,int>visited; // to check the presence of the digit in the permutation
    for(auto &it : nums) visited[it] = 0;
    findPermute(ans,temp,nums,visited);
    return ans;
}

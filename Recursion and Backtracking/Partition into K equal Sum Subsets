// Failed 4 Test Cases due to TLE but works PERFECTLY FINE

bool canPartitionHelper(const vector<int>&nums, vector<bool>&visited, vector<int>&ds, vector<vector<int>>&ans, int k, int targetSum, int currSum=0, int ind=0) {
	if(k==1) {
		ds.clear();
		for(int i=0;i<nums.size();i++) {
			if(not visited[i]) ds.push_back(nums[i]);
		}
		ans.push_back(ds);
		return 1;
	}
	if(targetSum == currSum) {
		ans.push_back(ds);
		ds.clear();
		return canPartitionHelper(nums,visited,ds,ans,k-1,targetSum,0,0);
	}

	for(int i=ind;i<nums.size();i++) {
		if(not visited[i] and currSum+nums[i]<=targetSum) {
			visited[i]=1;
			ds.push_back(nums[i]);
			if(canPartitionHelper(nums,visited,ds,ans,k,targetSum,currSum+nums[i],i+1)) return 1;
			ds.pop_back();
			visited[i]=0;
		}
	}
	return 0;
}

bool canPartition(vector<int>&nums, int k) {
	int sum=0; sum = accumulate(nums.begin(), nums.end(),sum);
	if(nums.size()==0 || k==0 || nums.size()<k || sum%k!=0) return 0;
	vector<bool>visited(nums.size(),0);
	vector<int>ds;
	vector<vector<int>>ans;
	int targetSum = sum/k;
	bool res = canPartitionHelper(nums,visited,ds,ans,k,targetSum);
	if(res) {
    	for(auto &it:ans) {
    		cout<<it.size()<<"\n";
    		for(auto &it1:it) cout<<it1<<" ";
    		cout<<"\n";
    	}
    }
    return res;
}

// ACCEPTED 

class Solution {
public:
   // use global variables to avoid long parameter list
   int target; // of each bucket
   vector< int > ns;
   vector< int > bucket;

   bool canPartitionKSubsets( vector<int>& nums, int k ) {
       int sum = 0;
       for( int &n : nums ) sum += n;
       if( sum % k ) return false; // not divisible
       target = sum / k;
       ns = vector< int >( nums );
       bucket = vector< int >( k, 0 );
       // starting with bigger ones makes it faster
       sort( ns.begin(), ns.end() );
       reverse( ns.begin(), ns.end() );
       return put(0);
   }

   // put #n item of ns into some bucket to meet target
   bool put(int n) {
       for( int i = 0; i < bucket.size(); ++i ) {
           if( bucket[i] + ns[n] > target) continue; // try next bucket
           bucket[i] += ns[n]; // put it in!
           if(n == ns.size() - 1) return true; // all items in bucket, no overflow
           if(put(n + 1)) return true; // move on to next item
           else { // no solution = wrong bucket
               bucket[i] -= ns[n]; // take it out
               if( bucket[i] == 0 ) return false; // no need to try other empty bucket
           }
       }
       return false; // no bucket fits
   }
};

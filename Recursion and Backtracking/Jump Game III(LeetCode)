bool canReachHelper(vector<int> &arr, unordered_set<int> &visited, int startInd) {
    if(startInd < 0 || startInd >= arr.size() || visited.find(startInd) != visited.end()) return false;
    if(arr[startInd] == 0) return true;
    visited.insert(startInd);
    bool left = canReachHelper(arr,visited,startInd + arr[startInd]);
    bool right = canReachHelper(arr,visited,startInd - arr[startInd]);
    return left || right;
}

bool canReach(vector<int>& arr, int startInd) {
    unordered_set<int>visited;
    return canReachHelper(arr,visited,startInd);
}


// In O(1) Space 
bool canReach(vector<int>& arr, int startInd) {
    if(startInd < 0 || startInd >= arr.size() || arr[startInd] == -1) return false;
    if(arr[startInd] == 0) return true;
    int temp = arr[startInd];
    arr[startInd] = -1;
    bool left = canReach(arr,startInd + temp);
    bool right = canReach(arr,startInd - temp);
    arr[startInd] = temp;
    return left || right;
}
